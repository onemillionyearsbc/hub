
/* 1. single namespace */

namespace io.onemillionyearsbc.hubtutorial

import io.onemillionyearsbc.hubtutorial.jobs.JobAds
import io.onemillionyearsbc.hubtutorial.jobs.JobPosting
import io.onemillionyearsbc.hubtutorial.jobs.BlockchainType
import io.onemillionyearsbc.hubtutorial.jobs.AccountType
import io.onemillionyearsbc.hubtutorial.jobs.JobType
import io.onemillionyearsbc.hubtutorial.tokens.ERC20Token

/**
  Six types of resource definitions
  1. Assets = objects of value
  2. Participants = actors in the system
  3. Transactions = actions performed on the system
  4. Events = notifications
  5. Enumerated types = labels within a class
  6. Concepts = grouping of fields to enable reuse across multiple resources */


/* <class name> <name> <identified by <field>> */

/* Class Definitions */

/* TODO move favourites to HubUser and change type to JobPosting[] */

abstract participant HubUser identified by email {
  o String      email 
  --> ERC20Token hubToken optional
  o String[] favourites optional
}

participant HubRecruiter extends HubUser {
  o String name
  o String company
  --> JobAds jobAds
  --> JobPosting[] jobPostings optional
}

participant HubJobSeeker extends HubUser {
  o HubJobSeekerParameters params
}

concept HubJobSeekerParameters {
  o Name name
  o String phone optional
  o String country 
  o String city optional
  o String cvhash optional
  o String cvfiledate optional
  o String weblink optional
  o Integer itexperience optional
  o String skills optional
  o BlockchainType  blockchainUsed optional
  o Integer blockexperience optional
  o String newjobsummary optional
  o String newjobtitle optional
  o Boolean newjobremote default=false
  o JobType newjobtype default = "FULLTIME"
  o Boolean visibility default=false
}
  
concept Name {
  o Title title optional
  o String firstName
  o String lastName
}

enum Title {
  o DR
  o MR
  o MRS
  o MISS
  o MS
  o PROF
}

asset HubAccount identified by email {
  o String      email 
  o String      password
  o Boolean     loggedIn default=false
  --> HubUser   owner
  o AccountType accountType default="JOBSEEKER"
  o DateTime    dateCreated
}


abstract transaction CreateAccount {
  o String      email 
  o String      password
  o Double     balance default=0.0
  o Double     allowance default=0.0
}

// TODO UpdateAccount and RemoveAccount

transaction CreateRecruiterAccount extends CreateAccount {
  o String name
  o String company 
  o AccountType accountType default="RECRUITER"
}

transaction CreateJobSeekerAccount extends CreateAccount {
  o HubJobSeekerParameters params
  o AccountType accountType default="JOBSEEKER"
}

transaction RemoveHubUser {
  o String email 
  o AccountType accountType default="RECRUITER"
}

transaction RemoveHubAccount {
  o String email 
}

transaction SetLoggedIn {
  o String      email 
  o Boolean     loggedIn
}

/* test calling of named query. The idea here  is to have a named query return the account then to use
the email to then get hold of the embedded HubUser field, so a two-part transaction to see if we can return
the correct HubUser for a given email/password combination)
*/
@returns(HubRecruiter)
transaction GetHubRecruiter {
  o String email
  o String password 
}

@returns(HubJobSeeker)
transaction GetHubJobSeeker {
  o String email
  o String password
}
  
  
@commit(false)
@returns(HubAccount)
transaction GetHubAccount {
  o String email
  o String password
}


/* TODO model the JobPosting asset */
/* TODO model:
  1. transactions to update data (user participant, job posting)
  2. apply for job transaction plus event */


