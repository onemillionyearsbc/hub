namespace io.onemillionyearsbc.hubtutorial.tokens


/* ERC20 Compliant Token For the Hub */

asset ERC20TokenSupply identified by tokenName {
  o String tokenName default = "hub"
  o Double supply
  o Double totalMinted
}

asset ERC20Token identified by email {
  o String email
  o Double balance default=0.0
  o Double allowance default=0.0
}

enum ERC20TokenTransactionType {
  o CASHOUT
  o SEARCH // tokens received for appearing in search results
  o INITIAL
  o LOADUP // user buys tokens
  o RANKPOINTS // example of internal transaction to buy ranking points
} 

asset ERC20TokenTransaction identified by id {
  o String id
  o String email
  o ERC20TokenTransactionType type
  o DateTime date
  o Double amount
  o Double balance
}


@returns(Double)
transaction GetERC20TotalSupply {
 o String tokenName default = "hub"
}

@returns(Double)
transaction GetERC20TotalMinted {
   o String tokenName default = "hub"
}

// add up all tokens in circulation...this is temporary...TODO...create token stats object
@returns(Double)
transaction GetERC20TokenTotal {
   o String tokenName default = "hub"
}

transaction SetERC20TotalSupply {
  o String tokenName default = "hub"
  o Double amount
}

/* add to the total supply */
transaction MintERC20 {
  o String tokenName default = "hub"
  o Double newSupply
  o Double newMint // usually new supply and new mint will be the same unless tokens are being given to the person who caused the mint
}

@returns(Double)
transaction GetERC20Balance {
  o String email
}

transaction SetERC20Balance {
  o String email
  o Double balance
}

/* transfer from the token supply to the owner */
transaction TransferERC20To {
  o String email
  o Double amount
  o Double limit default = 0.0 // the new amount for the supply including the transfer amount
  o Boolean updateSupply default = true
}

@returns(Double)
transaction GetERC20Allowance {
  o String email
}


transaction SetERC20Allowance {
  o String email
  o Double allowance
}

transaction TransferERC20 {
  o String emailFrom
  o String emailTo
  o Double amount
}

@returns(ERC20TokenTransaction)
transaction CreateERC20Transaction {
  o String email
  o ERC20TokenTransactionType type
  o Double amount
  o Double newBalance optional // use for new accounts
}


// this transaction udates the user token balance and adds a new transaction to their history
transaction UpdateTokensForUser {
  o String email
  o Double amount
  o Double limit default = 0.0
  o ERC20TokenTransactionType transactionType
  o Boolean updateSupply default = true
}

// return sorted array if transactions for user {email}
@returns(ERC20TokenTransaction[])
transaction GetTransactionHistoryForUser {
  o String email
}

// users can buy tokens...mint plus update
transaction BuyTokens {
    o String email
    o Double amount
}

// users can sell tokens in exchange for cash
transaction CashOutTokens {
    o String email
    o Double amount
} 

// users can sell tokens in exchange for ranking points
// to appear higher up in search results
transaction BuyRankingPoints {
    o String email
    o Double amount
}

